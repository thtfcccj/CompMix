/*******************************************************************************

                       事件池
事件池用于沉淀开机或复位以来产生的信息(生产者写入)，以供消费者读取。
生产者可产生事件(同类别可有多个)与取消事件(唯一),消费者可重读或继续读取
生产者产生取消事件后：若没被消费者消费(未流入市场)，则自生即自灭，
                     否则在消费者获取取消事件取消后，再行自生自灭。

********************************************************************************/
#ifndef __EVENT_POOL_H 
#define __EVENT_POOL_H

/*****************************************************************************
                          相关配置
******************************************************************************/

//此模块时建议的定义
//#define SUPPORT_EVENT_POOL

/*****************************************************************************
                          相关结构
******************************************************************************/

//通报结构
struct _EventPool{
  //自身信息
  unsigned char Id;           //多种事件池时，标误Id号
  unsigned char  EventSize;   //每个事件大小
  unsigned short Capability;  //容量
  //内部管理
  unsigned char  *pData;      //池数据
  unsigned short WrPos;       //写位
  unsigned short RdPos;       //读位
};

/*******************************************************************************
                          相关函数-生产者
********************************************************************************/

//------------------------------事件池创建-----------------------------------
//开机时调用，NULL创建失败
struct _EventPool *EventPool_pCreate(unsigned char Id,//多种事件池时，标误Id号
                                      unsigned char  EventSize,//每个事件大小
                                      unsigned short Capability);//所需容量

//---------------------------------写事件------------------------------------
//生产者产生或取消事件时调用
//返回0成功，非0失败
signed char EventPool_Wr(struct _EventPool *pEventPool,
                          const unsigned char *pEvent);

//---------------------------------复位--------------------------------------
//用于系统复位时，将读写清空
//注：外部也需同时告知消费者清空了
void EventPool_Reset(struct _EventPool *pEventPool);

/*******************************************************************************
                          相关函数-消费者
********************************************************************************/

//-----------------------------读取事件---------------------------------
//返回NULL表示读完了
unsigned char *EventPool_pRd(const struct _EventPool *pEventPool);

//----------------------------读取事件完成-------------------------------
//EventPool_pRd()并确认处理完成后调用此函数
void EventPool_RdFinal(struct _EventPool *pEventPool);

//-------------------------------重新读取---------------------------------
//用于重新读信息
void EventPool_RdReStart(struct _EventPool *pEventPool);

/*******************************************************************************
                             回调函数
********************************************************************************/

//------------------------------是否为待取消的事件-------------------------------
//0时不是取消类型件，否则返回取消类型件对应的事件码
unsigned char EventPool_cbIsCancel(unsigned char Id,
                                    const unsigned char *pEvent);

//------------------------------是否为相同事件----------------------------------
//1相同，0不相同
signed char EventPool_cbIsSame(unsigned char Id,
                                const unsigned char *pEvent0,
                                const unsigned char *pEvent1);




#endif
